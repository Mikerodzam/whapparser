const async = require('async');
const { body, validationResult } = require("express-validator");
const csvtojson = require("csvtojson");
const processor = require('../src/utils/processor');
const expenseRepo = require('../src/repo/expenseRepo');

/** Show all expenses in a month - start with current/newest month
 * - ability to upload latest expenses (from file)
 * - ability to update expenses (category, bucket, sum)
 * - ability to delete a specific expense
 * - ability to select a specific month to display
 */

// Display list of all Expenses in that month.
exports.expenses_list_by_month = (req, res) => {
  expenseRepo.getExpensesByMonth(req.body.month, req.body.year, function (err, list_expenses, meta) {
    if (err) {
      res.render('error', { error: err });
      //return next(err); 
    }
    //set the URL so we know where we are - this will allow further filtering for current month
    res.locals.path = req.originalUrl;
    //trimit titlul, lista de cheltuieli dar si metadata
    res.render('monthlyView', {
      title: 'Expenses for: ' + meta.current.selectedMonth +
        ", " + meta.current.selectedYear
      , expense_list: list_expenses, metadata: meta
    });
  });
};

exports.expenses_list_by_category = (req, res) => {
  expenseRepo.getExpensesByCategory(req.params.id, function (err, list_expenses, meta) {
    if (err) {
      res.render('error', { error: err });
      //return next(err); 
    }
    //set the URL so we know where we are - this will allow further filtering for current month
    res.locals.path = req.originalUrl;
    //trimit titlul, lista de cheltuieli dar si metadata
    res.render('monthlyView', {
      title: "Category: " + req.params.id
      , expense_list: list_expenses, metadata: meta
    });
  });
};

exports.expenses_list_by_bucket = (req, res) => {
  expenseRepo.getExpensesByBucket(req.params.id, function (err, list_expenses, meta) {
    if (err) {
      res.render('error', { error: err });
      //return next(err); 
    }
    //set the URL so we know where we are - this will allow further filtering for current month
    res.locals.path = req.originalUrl;
    //trimit titlul, lista de cheltuieli dar si metadata
    res.render('monthlyView', {
      title: "Bucket: " + req.params.id
      , expense_list: list_expenses, metadata: meta
    });
  });
};


// Handle Expense delete on POST.
exports.expense_delete_post = (req, res) => {
  res.send('NOT IMPLEMENTED: Expense delete POST');
};

// Handle Expense update on POST.
exports.expense_update_post = (req, res) => {
  res.send('NOT IMPLEMENTED: Expense update POST');
};

// Upload the file generated by whatsapp
exports.load_monthly_expenses_post = (req, res) => {
  var csvData = req.files.filename.data.toString('utf8');
  expenseRepo.importFromFile(csvData, function () {
    res.redirect('/monthlyView');
  });
};
